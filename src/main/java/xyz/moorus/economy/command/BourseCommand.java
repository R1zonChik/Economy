package xyz.moorus.economy.command;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import xyz.moorus.economy.main.Economy;
import xyz.moorus.economy.market.BourseManager;
import xyz.moorus.economy.market.ExchangeResult;
import xyz.moorus.economy.market.Order;
import xyz.moorus.economy.money.WalletManager;
import xyz.moorus.economy.sql.Database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class BourseCommand implements Command, Listener {

    private Map<String, String> playerMenus = new HashMap<>();
    private Map<String, String[]> playerTradingPair = new HashMap<>();
    private Map<String, Integer> playerPages = new HashMap<>();
    private int lastCreatedOrderId = 0;

    public int getLastCreatedOrderId() {
        return lastCreatedOrderId;
    }

    public void setLastCreatedOrderId(int id) {
        this.lastCreatedOrderId = id;
    }

    public BourseCommand() {
        Bukkit.getPluginManager().registerEvents(this, Economy.getInstance());
    }

    @Override
    public String getName() {
        return "bourse";
    }

    @Override
    public void execute(String sender, String[] args) {
        Player player = Bukkit.getPlayer(sender);
        if (player == null) return;

        if (args.length == 0) {
            openBourseMenu(player);
            return;
        }

        String action = args[0].toLowerCase();

        switch (action) {
            case "list":
            case "menu":
                openBourseMenu(player);
                break;

            case "add":
            case "create":
                if (args.length != 5) {
                    player.sendMessage(colorize("&c–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bourse add <–ø—Ä–æ–¥–∞—é_–≤–∞–ª—é—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–ø–æ–∫—É–ø–∞—é_–≤–∞–ª—é—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>"));
                    player.sendMessage(colorize("&7–ü—Ä–∏–º–µ—Ä: /bourse add VIL 100 USD 50"));
                } else {
                    handleAddOrder(player, args);
                }
                break;

            case "buy":
                if (args.length != 2) {
                    player.sendMessage(colorize("&c–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bourse buy <id_–æ—Ä–¥–µ—Ä–∞>"));
                } else {
                    handleBuyOrder(player, args[1]);
                }
                break;

            case "cancel":
                if (args.length != 2) {
                    player.sendMessage(colorize("&c–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bourse cancel <id_–æ—Ä–¥–µ—Ä–∞>"));
                } else {
                    handleCancelOrder(player, args[1]);
                }
                break;

            case "my":
            case "myorders":
                openMyOrdersMenu(player, 0);
                break;

            case "pair":
                if (args.length == 3) {
                    openTradingPairOrders(player, args[1].toUpperCase(), args[2].toUpperCase());
                } else {
                    player.sendMessage(colorize("&c–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bourse pair <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2>"));
                }
                break;

            case "help":
            default:
                showHelp(player);
                break;
        }
    }

    private int getMaxOrders(Player player) {
        if (player.hasPermission("economy.bourse.max.unlimited")) return -1; // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        if (player.hasPermission("economy.bourse.max.20")) return 20;
        if (player.hasPermission("economy.bourse.max.15")) return 15;
        if (player.hasPermission("economy.bourse.max.10")) return 10;
        if (player.hasPermission("economy.bourse.max.5")) return 5;
        if (player.hasPermission("economy.bourse.max.3")) return 3;
        return Economy.getInstance().getConfig().getInt("bourse.default_max_orders", 3);
    }

    private void openBourseMenu(Player player) {
        playerMenus.put(player.getName(), "bourse");

        Inventory inv = Bukkit.createInventory(null, 54, colorize("&6¬ßl–ë–∏—Ä–∂–∞ –≤–∞–ª—é—Ç"));

        // –ü–û–ü–£–õ–Ø–†–ù–´–ï –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´
        List<String> popularPairs = getPopularCurrencyPairs();

        int slot = 10;
        for (String pair : popularPairs) {
            if (slot >= 17) break;

            String[] currencies = pair.split("/");
            if (currencies.length == 2) {
                ItemStack pairItem = createCurrencyPairItem(currencies[0], currencies[1]);
                inv.setItem(slot, pairItem);
                slot++;
            }
        }

        // –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞
        ItemStack myOrders = new ItemStack(Material.BOOK);
        ItemMeta myOrdersMeta = myOrders.getItemMeta();
        myOrdersMeta.setDisplayName(colorize("&b¬ßl–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞"));
        List<String> myOrdersLore = new ArrayList<>();
        myOrdersLore.add(colorize("&7–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"));
        myOrdersLore.add(colorize("&7–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: &f" + getPlayerOrderCount(player.getName())));
        myOrdersLore.add(colorize("&e"));
        myOrdersLore.add(colorize("&a–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"));
        myOrdersMeta.setLore(myOrdersLore);
        myOrders.setItemMeta(myOrdersMeta);
        inv.setItem(22, myOrders);

        // –í—Å–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        ItemStack allPairs = new ItemStack(Material.GOLD_INGOT);
        ItemMeta allPairsMeta = allPairs.getItemMeta();
        allPairsMeta.setDisplayName(colorize("&6–í—Å–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã"));
        allPairsMeta.setLore(Arrays.asList(
                colorize("&7–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã"),
                colorize("&e"),
                colorize("&e–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        ));
        allPairs.setItemMeta(allPairsMeta);
        inv.setItem(31, allPairs);

        // –ü–û–î–°–ö–ê–ó–ö–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
        addBourseHelp(inv);

        player.openInventory(inv);
    }

    private void addBourseHelp(Inventory gui) {
        // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        ItemStack help = new ItemStack(Material.PAPER);
        ItemMeta helpMeta = help.getItemMeta();
        helpMeta.setDisplayName(colorize("&aüìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∏—Ä–∂–µ–π"));
        helpMeta.setLore(Arrays.asList(
                colorize("&7"),
                colorize("&eüî∏ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:"),
                colorize("&f/bourse add <–ø—Ä–æ–¥–∞—é> <–∫–æ–ª-–≤–æ> <–ø–æ–∫—É–ø–∞—é> <–∫–æ–ª-–≤–æ>"),
                colorize("&7–ü—Ä–∏–º–µ—Ä: /bourse add VIL 100 ABC 50"),
                colorize("&7"),
                colorize("&eüî∏ –ü–æ–∫—É–ø–∫–∞ –ø–æ –æ—Ä–¥–µ—Ä—É:"),
                colorize("&f/bourse buy <ID>"),
                colorize("&7"),
                colorize("&eüî∏ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞:"),
                colorize("&f/bourse cancel <ID>"),
                colorize("&7"),
                colorize("&eüî∏ –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞:"),
                colorize("&f/bourse my"),
                colorize("&7"),
                colorize("&c‚ö† –ö–æ–º–∏—Å—Å–∏—è –±–∏—Ä–∂–∏: 1%")
        ));
        help.setItemMeta(helpMeta);
        gui.setItem(49, help);
    }

    private List<String> getPopularCurrencyPairs() {
        List<String> pairs = new ArrayList<>();
        Database database = Economy.getInstance().getDatabase();

        try (Connection conn = database.getConnection()) {
            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ä–¥–µ—Ä–æ–≤
            String sql = "SELECT sell_currency, buy_currency, COUNT(*) as order_count " +
                    "FROM bourse_orders WHERE status = 'ACTIVE' " +
                    "GROUP BY sell_currency, buy_currency " +
                    "ORDER BY order_count DESC LIMIT 6";

            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                try (ResultSet rs = stmt.executeQuery()) {
                    while (rs.next()) {
                        String sellCurrency = rs.getString("sell_currency");
                        String buyCurrency = rs.getString("buy_currency");
                        pairs.add(sellCurrency + "/" + buyCurrency);
                    }
                }
            }
        } catch (SQLException e) {
            Economy.getInstance().getLogger().warning("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä: " + e.getMessage());
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if (pairs.isEmpty()) {
            pairs.add("VIL/ABC");
            pairs.add("ABC/VIL");
            pairs.add("VIL/XYZ");
            pairs.add("XYZ/VIL");
        }

        return pairs;
    }

    private ItemStack createCurrencyPairItem(String sellCurrency, String buyCurrency) {
        ItemStack item = new ItemStack(Material.GOLD_NUGGET);
        ItemMeta meta = item.getItemMeta();
        meta.setDisplayName(colorize("&6" + sellCurrency + " ‚Üí " + buyCurrency));

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–µ
        int activeOrders = getActiveOrdersCount(sellCurrency, buyCurrency);
        double bestRate = getBestExchangeRate(sellCurrency, buyCurrency);

        List<String> lore = new ArrayList<>();
        lore.add(colorize("&7–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: &f" + sellCurrency + "/" + buyCurrency));
        lore.add(colorize("&7–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: &e" + activeOrders));
        if (bestRate > 0) {
            lore.add(colorize("&7–õ—É—á—à–∏–π –∫—É—Ä—Å: &a" + String.format("%.4f", bestRate)));
        }
        lore.add(colorize("&e"));
        lore.add(colorize("&e–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤"));

        meta.setLore(lore);
        item.setItemMeta(meta);
        return item;
    }

    private int getActiveOrdersCount(String sellCurrency, String buyCurrency) {
        Database database = Economy.getInstance().getDatabase();

        try (Connection conn = database.getConnection()) {
            String sql = "SELECT COUNT(*) FROM bourse_orders WHERE sell_currency = ? AND buy_currency = ? AND status = 'ACTIVE'";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, sellCurrency);
                stmt.setString(2, buyCurrency);

                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt(1);
                    }
                }
            }
        } catch (SQLException e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }

        return 0;
    }

    private double getBestExchangeRate(String sellCurrency, String buyCurrency) {
        Database database = Economy.getInstance().getDatabase();

        try (Connection conn = database.getConnection()) {
            String sql = "SELECT MIN(buy_amount / sell_amount) FROM bourse_orders WHERE sell_currency = ? AND buy_currency = ? AND status = 'ACTIVE'";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, sellCurrency);
                stmt.setString(2, buyCurrency);

                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        return rs.getDouble(1);
                    }
                }
            }
        } catch (SQLException e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }

        return 0.0;
    }

    private int getPlayerOrderCount(String playerName) {
        Database database = Economy.getInstance().getDatabase();

        try (Connection conn = database.getConnection()) {
            String sql = "SELECT COUNT(*) FROM bourse_orders WHERE player_name = ? AND status = 'ACTIVE'";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, playerName);

                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt(1);
                    }
                }
            }
        } catch (SQLException e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }

        return 0;
    }

    private void openTradingPairOrders(Player player, String currency1, String currency2) {
        playerMenus.put(player.getName(), "trading_pair");
        playerTradingPair.put(player.getName(), new String[]{currency1, currency2});
        playerPages.put(player.getName(), 0);

        Database database = Economy.getInstance().getDatabase();
        List<Order> orders = database.getOrders(currency1, currency2);

        String title = colorize("&6" + currency1 + " ‚Üí " + currency2);

        Inventory ordersGui = Bukkit.createInventory(null, 54, colorize(title));

        int slot = 0;
        for (Order order : orders) {
            if (slot >= 45) break; // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫

            ItemStack orderItem = createOrderDisplay(order);
            ordersGui.setItem(slot++, orderItem);
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        ItemStack backButton = new ItemStack(Material.ARROW);
        ItemMeta backMeta = backButton.getItemMeta();
        if (backMeta != null) {
            backMeta.setDisplayName(colorize("&c–ù–∞–∑–∞–¥ –∫ –±–∏—Ä–∂–µ"));
            backMeta.setLore(Arrays.asList(colorize("&7–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")));
            backButton.setItemMeta(backMeta);
        }
        ordersGui.setItem(45, backButton);

        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
        ItemStack createButton = new ItemStack(Material.EMERALD);
        ItemMeta createMeta = createButton.getItemMeta();
        if (createMeta != null) {
            createMeta.setDisplayName(colorize("&a–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä"));
            createMeta.setLore(Arrays.asList(
                    colorize("&7–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è"),
                    colorize("&7–ø–∞—Ä—ã " + currency1 + "/" + currency2)
            ));
            createButton.setItemMeta(createMeta);
        }
        ordersGui.setItem(49, createButton);

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
        ItemStack refreshButton = new ItemStack(Material.CLOCK);
        ItemMeta refreshMeta = refreshButton.getItemMeta();
        if (refreshMeta != null) {
            refreshMeta.setDisplayName(colorize("&b–û–±–Ω–æ–≤–∏—Ç—å"));
            refreshMeta.setLore(Arrays.asList(colorize("&7–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤")));
            refreshButton.setItemMeta(refreshMeta);
        }
        ordersGui.setItem(53, refreshButton);

        player.openInventory(ordersGui);

        if (orders.isEmpty()) {
            player.sendMessage(colorize("&7–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—ã " + currency1 + "/" + currency2));
        } else {
            player.sendMessage(colorize("&7–ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: " + orders.size()));
        }
    }

    private void openMyOrdersMenu(Player player, int page) {
        playerMenus.put(player.getName(), "my_orders");
        playerPages.put(player.getName(), page);

        Database database = Economy.getInstance().getDatabase();
        int itemsPerPage = 45;
        List<Order> myOrders = database.getPlayerOrdersPaginated(player.getName(), page, itemsPerPage);
        int totalOrders = database.getPlayerOrderCount(player.getName());
        int totalPages = (int) Math.ceil((double) totalOrders / itemsPerPage);

        String title = Economy.getInstance().getConfig().getString("bourse.gui.titles.my_orders", "&6–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞");
        if (totalPages > 1) {
            title += " (" + (page + 1) + "/" + totalPages + ")";
        }

        Inventory myOrdersGui = Bukkit.createInventory(null, 54, colorize(title));

        int slot = 0;
        for (Order order : myOrders) {
            if (slot >= 45) break;

            ItemStack orderItem = createMyOrderDisplay(order);
            myOrdersGui.setItem(slot++, orderItem);
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if (page > 0) {
            ItemStack prevButton = new ItemStack(Material.ARROW);
            ItemMeta prevMeta = prevButton.getItemMeta();
            if (prevMeta != null) {
                prevMeta.setDisplayName(colorize("&c–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"));
                prevMeta.setLore(Arrays.asList(colorize("&7–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page)));
                prevButton.setItemMeta(prevMeta);
            }
            myOrdersGui.setItem(48, prevButton);
        }

        if (page < totalPages - 1) {
            ItemStack nextButton = new ItemStack(Material.ARROW);
            ItemMeta nextMeta = nextButton.getItemMeta();
            if (nextMeta != null) {
                nextMeta.setDisplayName(colorize("&a–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"));
                nextMeta.setLore(Arrays.asList(colorize("&7–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + (page + 2))));
                nextButton.setItemMeta(nextMeta);
            }
            myOrdersGui.setItem(50, nextButton);
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        ItemStack backButton = new ItemStack(Material.BARRIER);
        ItemMeta backMeta = backButton.getItemMeta();
        if (backMeta != null) {
            backMeta.setDisplayName(colorize("&c–ù–∞–∑–∞–¥ –∫ –±–∏—Ä–∂–µ"));
            backMeta.setLore(Arrays.asList(colorize("&7–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")));
            backButton.setItemMeta(backMeta);
        }
        myOrdersGui.setItem(49, backButton);

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
        ItemStack refreshButton = new ItemStack(Material.CLOCK);
        ItemMeta refreshMeta = refreshButton.getItemMeta();
        if (refreshMeta != null) {
            refreshMeta.setDisplayName(colorize("&b–û–±–Ω–æ–≤–∏—Ç—å"));
            refreshMeta.setLore(Arrays.asList(colorize("&7–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤")));
            refreshButton.setItemMeta(refreshMeta);
        }
        myOrdersGui.setItem(53, refreshButton);

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ
        if (!myOrders.isEmpty()) {
            ItemStack cancelAllButton = new ItemStack(Material.TNT);
            ItemMeta cancelAllMeta = cancelAllButton.getItemMeta();
            if (cancelAllMeta != null) {
                cancelAllMeta.setDisplayName(colorize("&c–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞"));
                cancelAllMeta.setLore(Arrays.asList(
                        colorize("&7–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏"),
                        colorize("&7–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞"),
                        colorize("&e"),
                        colorize("&c–û–°–¢–û–†–û–ñ–ù–û!")
                ));
                cancelAllButton.setItemMeta(cancelAllMeta);
            }
            myOrdersGui.setItem(45, cancelAllButton);
        }

        player.openInventory(myOrdersGui);

        if (myOrders.isEmpty()) {
            player.sendMessage(colorize(Economy.getInstance().getConfig().getString("messages.bourse.no_orders", "&7–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")));
        } else {
            player.sendMessage(colorize("&7–í–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: " + totalOrders + " (—Å—Ç—Ä. " + (page + 1) + "/" + totalPages + ")"));
        }
    }

    private ItemStack createOrderDisplay(Order order) {
        ItemStack orderItem = new ItemStack(Material.PAPER);
        ItemMeta meta = orderItem.getItemMeta();
        if (meta != null) {
            double rate = (double) order.getBuyAmount() / order.getSellAmount();
            meta.setDisplayName(colorize("&6–û—Ä–¥–µ—Ä #" + order.getId()));

            List<String> lore = Economy.getInstance().getConfig().getStringList("bourse.order_display.order_lore");
            if (lore.isEmpty()) {
                lore = Arrays.asList(
                        "&7–ü—Ä–æ–¥–∞–≤–µ—Ü: &f{seller}",
                        "&7–ü—Ä–æ–¥–∞–µ—Ç: &e{sell_amount} {sell_currency}",
                        "&7–ü–æ–∫—É–ø–∞–µ—Ç: &e{buy_amount} {buy_currency}",
                        "&7–ö—É—Ä—Å: &f{rate}",
                        "&7–ó–∞ 1 {sell_currency} = {rate} {buy_currency}",
                        "",
                        "&a–õ–ö–ú - –ö—É–ø–∏—Ç—å",
                        "&c–ü–ö–ú - –ü–æ–¥—Ä–æ–±–Ω–µ–µ"
                );
            }

            for (int i = 0; i < lore.size(); i++) {
                String line = lore.get(i);
                line = line.replace("{seller}", order.getNickname())
                        .replace("{sell_amount}", String.format("%,d", order.getSellAmount()))
                        .replace("{sell_currency}", order.getSellCurrency())
                        .replace("{buy_amount}", String.format("%,d", order.getBuyAmount()))
                        .replace("{buy_currency}", order.getBuyCurrency())
                        .replace("{rate}", String.format("%.6f", rate));
                lore.set(i, colorize(line));
            }

            meta.setLore(lore);
            orderItem.setItemMeta(meta);
        }
        return orderItem;
    }

    private ItemStack createMyOrderDisplay(Order order) {
        ItemStack orderItem = new ItemStack(Material.WRITABLE_BOOK);
        ItemMeta meta = orderItem.getItemMeta();
        if (meta != null) {
            double rate = (double) order.getBuyAmount() / order.getSellAmount();
            meta.setDisplayName(colorize("&6–ú–æ–π –æ—Ä–¥–µ—Ä #" + order.getId()));

            List<String> lore = Economy.getInstance().getConfig().getStringList("bourse.order_display.my_order_lore");
            if (lore.isEmpty()) {
                lore = Arrays.asList(
                        "&7–ü—Ä–æ–¥–∞—é: &e{sell_amount} {sell_currency}",
                        "&7–ü–æ–∫—É–ø–∞—é: &e{buy_amount} {buy_currency}",
                        "&7–ö—É—Ä—Å: &f{rate}",
                        "&7–°—Ç–∞—Ç—É—Å: &a–ê–∫—Ç–∏–≤–µ–Ω",
                        "",
                        "&c–õ–ö–ú - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä",
                        "&e–ü–ö–ú - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        "&7Shift+–õ–ö–ú - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É"
                );
            }

            for (int i = 0; i < lore.size(); i++) {
                String line = lore.get(i);
                line = line.replace("{sell_amount}", String.format("%,d", order.getSellAmount()))
                        .replace("{sell_currency}", order.getSellCurrency())
                        .replace("{buy_amount}", String.format("%,d", order.getBuyAmount()))
                        .replace("{buy_currency}", order.getBuyCurrency())
                        .replace("{rate}", String.format("%.6f", rate));
                lore.set(i, colorize(line));
            }

            meta.setLore(lore);
            orderItem.setItemMeta(meta);
        }
        return orderItem;
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        Player player = (Player) event.getWhoClicked();
        String title = event.getView().getTitle();

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—à–∏—Ö –º–µ–Ω—é
        if (!title.contains("‚Üí") && !title.contains("–ë–∏—Ä–∂–∞") && !title.contains("–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞")) {
            return;
        }

        // –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô
        event.setCancelled(true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if (event.getClickedInventory() != event.getView().getTopInventory()) {
            return;
        }

        ItemStack clickedItem = event.getCurrentItem();
        if (clickedItem == null || clickedItem.getType() == Material.AIR) return;

        int slot = event.getSlot();

        // –ü–†–Ø–ú–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ë–ï–ó –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê
        if (title.contains("‚Üí")) {
            // –≠—Ç–æ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            handleTradingPairClick(player, slot, event.isLeftClick());
        } else if (title.contains("–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞")) {
            // –≠—Ç–æ –º–µ–Ω—é –º–æ–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
            handleMyOrdersClick(player, slot, event.isLeftClick(), event.isRightClick(), event.isShiftClick());
        } else if (title.contains("–ë–∏—Ä–∂–∞")) {
            // –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∏—Ä–∂–∏
            handleBourseMenuClick(player, slot, event.getClick());
        }
    }

    private String determineMenuType(String title) {
        String cleanTitle = title.replace("¬ß", "").replace("&", "").toLowerCase();

        if (cleanTitle.contains("–º–æ–∏ –æ—Ä–¥–µ—Ä–∞")) {
            return "my_orders";
        } else if (cleanTitle.contains("‚Üí") || cleanTitle.contains("->")) {
            return "trading_pair";
        } else if (cleanTitle.contains("–±–∏—Ä–∂–∞ –≤–∞–ª—é—Ç")) {
            return "bourse";
        }

        return "unknown";
    }

    private boolean isOurInventory(String title) {
        String cleanTitle = title.replace("¬ß", "").replace("&", "").toLowerCase();
        return cleanTitle.contains("–±–∏—Ä–∂–∞ –≤–∞–ª—é—Ç") ||
                cleanTitle.contains("–º–æ–∏ –æ—Ä–¥–µ—Ä–∞") ||
                cleanTitle.contains("‚Üí") ||
                cleanTitle.contains("->") ||
                cleanTitle.contains("bourse") ||
                cleanTitle.contains("orders") ||
                cleanTitle.contains("vil") ||
                cleanTitle.contains("abc") ||
                cleanTitle.contains("—Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä");
    }

    @EventHandler
    public void onInventoryClose(InventoryCloseEvent event) {
        if (!(event.getPlayer() instanceof Player)) return;
        Player player = (Player) event.getPlayer();

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        String title = event.getView().getTitle();
        if (isOurInventory(title)) {
            playerMenus.remove(player.getName());
            playerPages.remove(player.getName());
            playerTradingPair.remove(player.getName());
        }
    }

    @EventHandler
    public void onInventoryDrag(InventoryDragEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;

        String title = event.getView().getTitle();

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤ –Ω–∞—à–∏—Ö –º–µ–Ω—é
        if (isOurInventory(title)) {
            event.setCancelled(true);
        }
    }

    private void handleBourseMenuClick(Player player, int slot, ClickType clickType) {
        if (slot == 22) { // –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞
            openMyOrdersMenu(player, 0);
        } else if (slot >= 10 && slot <= 16) { // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
            ItemStack clicked = player.getOpenInventory().getTopInventory().getItem(slot);
            if (clicked != null && clicked.getType() == Material.GOLD_NUGGET) {
                String displayName = clicked.getItemMeta().getDisplayName();
                String[] currencies = displayName.replace("¬ß6", "").split(" ‚Üí ");

                if (currencies.length == 2) {
                    openTradingPairOrders(player, currencies[0], currencies[1]);
                }
            }
        } else if (slot == 31) { // –í—Å–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
            showAllCurrencyPairs(player);
        }
    }

    private void showAllCurrencyPairs(Player player) {
        Database database = Economy.getInstance().getDatabase();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
        Set<String> currencies = new HashSet<>();
        try (Connection connection = database.getConnection();
             PreparedStatement stmt = connection.prepareStatement("SELECT DISTINCT currency_name FROM currencies")) {
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                currencies.add(rs.getString("currency_name"));
            }
        } catch (SQLException e) {
            Economy.getInstance().getLogger().severe("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç: " + e.getMessage());
        }

        player.sendMessage(colorize("&6=== –í—Å–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã ==="));
        for (String currency1 : currencies) {
            for (String currency2 : currencies) {
                if (!currency1.equals(currency2)) {
                    int orderCount = getActiveOrdersCount(currency1, currency2);
                    if (orderCount > 0) {
                        player.sendMessage(colorize("&7" + currency1 + " ‚Üí " + currency2 + " &f(" + orderCount + " –æ—Ä–¥–µ—Ä–æ–≤)"));
                    }
                }
            }
        }
        player.sendMessage(colorize("&7–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ &f/bourse pair <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2> &7–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"));
    }

    private void handleTradingPairClick(Player player, int slot, boolean leftClick) {
        // –£–ë–ò–†–ê–ï–ú –û–¢–õ–ê–î–ö–£ –ò –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–Ø–ú–£–Æ –û–ë–†–ê–ë–û–¢–ö–£

        if (slot == 45) { // –ù–∞–∑–∞–¥
            openBourseMenu(player);
            return;
        }

        if (slot == 49) { // –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
            String[] pair = playerTradingPair.get(player.getName());
            if (pair != null) {
                player.closeInventory();
                player.sendMessage(colorize("&6=== –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–ê ==="));
                player.sendMessage(colorize("&7–ü–∞—Ä–∞: &f" + pair[0] + " ‚Üí " + pair[1]));
                player.sendMessage(colorize("&7–ö–æ–º–∞–Ω–¥–∞: &f/bourse add " + pair[0] + " <–∫–æ–ª-–≤–æ> " + pair[1] + " <–∫–æ–ª-–≤–æ>"));
                player.sendMessage(colorize("&7–ü—Ä–∏–º–µ—Ä: &f/bourse add " + pair[0] + " 100 " + pair[1] + " 50"));
                player.sendMessage(colorize("&e"));
                player.sendMessage(colorize("&7–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –ø—Ä–æ–¥–∞—é 100 " + pair[0] + ", –ø–æ–∫—É–ø–∞—é 50 " + pair[1]));
            }
            return;
        }

        if (slot == 53) { // –û–±–Ω–æ–≤–∏—Ç—å
            String[] pair = playerTradingPair.get(player.getName());
            if (pair != null) {
                openTradingPairOrders(player, pair[0], pair[1]);
            }
            return;
        }

        if (slot < 45) { // –ö–ª–∏–∫ –ø–æ –æ—Ä–¥–µ—Ä—É
            Database database = Economy.getInstance().getDatabase();
            String[] pair = playerTradingPair.get(player.getName());

            if (pair != null) {
                List<Order> orders = database.getOrders(pair[0], pair[1]);
                if (slot < orders.size()) {
                    Order order = orders.get(slot);
                    if (leftClick) {
                        // –ü–æ–∫—É–ø–∫–∞ –æ—Ä–¥–µ—Ä–∞
                        player.closeInventory();
                        handleBuyOrder(player, String.valueOf(order.getId()));
                    } else {
                        // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
                        player.closeInventory();
                        showOrderDetails(player, order);
                    }
                }
            }
        }
    }

    private void handleMyOrdersClick(Player player, int slot, boolean leftClick, boolean rightClick, boolean shiftClick) {
        if (slot == 49) { // –ù–∞–∑–∞–¥
            openBourseMenu(player);
        } else if (slot == 53) { // –û–±–Ω–æ–≤–∏—Ç—å
            int currentPage = playerPages.getOrDefault(player.getName(), 0);
            openMyOrdersMenu(player, currentPage);
        } else if (slot == 48) { // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            int currentPage = playerPages.getOrDefault(player.getName(), 0);
            if (currentPage > 0) {
                openMyOrdersMenu(player, currentPage - 1);
            }
        } else if (slot == 50) { // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            int currentPage = playerPages.getOrDefault(player.getName(), 0);
            openMyOrdersMenu(player, currentPage + 1);
        } else if (slot == 45) { // –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ
            if (shiftClick) {
                cancelAllOrders(player);
                openMyOrdersMenu(player, 0);
            } else {
                player.sendMessage(colorize("&e–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –í–°–ï –æ—Ä–¥–µ—Ä–∞?"));
                player.sendMessage(colorize("&7–ù–∞–∂–º–∏—Ç–µ Shift+–õ–ö–ú –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"));
            }
        } else if (slot < 45) { // –ö–ª–∏–∫ –ø–æ –æ—Ä–¥–µ—Ä—É
            Database database = Economy.getInstance().getDatabase();
            int currentPage = playerPages.getOrDefault(player.getName(), 0);
            List<Order> myOrders = database.getPlayerOrdersPaginated(player.getName(), currentPage, 45);

            if (slot < myOrders.size()) {
                Order order = myOrders.get(slot);

                if (leftClick && shiftClick) {
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
                    cancelOrder(player, order);
                    openMyOrdersMenu(player, currentPage); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                } else if (leftClick) {
                    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
                    player.sendMessage(colorize("&e–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä #" + order.getId() + "?"));
                    player.sendMessage(colorize("&7–ù–∞–∂–º–∏—Ç–µ Shift+–õ–ö–ú –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"));
                    player.sendMessage(colorize("&7–ë—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: " + String.format("%,d", order.getSellAmount()) + " " + order.getSellCurrency()));
                } else if (rightClick) {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
                    player.closeInventory();
                    showOrderDetails(player, order);
                }
            }
        }
    }

    private void handleAddOrder(Player player, String[] args) {
        WalletManager walletManager = Economy.getInstance().getWalletManager();
        Database database = Economy.getInstance().getDatabase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤
        int currentOrders = database.getPlayerOrderCount(player.getName());
        int maxOrders = getMaxOrders(player);

        if (maxOrders != -1 && currentOrders >= maxOrders) {
            String message = Economy.getInstance().getConfig().getString("messages.bourse.max_orders_reached", "&c–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤! ({max})")
                    .replace("{max}", String.valueOf(maxOrders));
            player.sendMessage(colorize(message));
            player.sendMessage(colorize("&7–û—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∞–≤"));
            return;
        }

        String sellCurrency = args[1].toUpperCase();
        String buyCurrency = args[3].toUpperCase();
        int sellAmount, buyAmount;

        try {
            sellAmount = Integer.parseInt(args[2]);
            buyAmount = Integer.parseInt(args[4]);
        } catch (NumberFormatException e) {
            player.sendMessage(colorize("&c–ù–µ–≤–µ—Ä–Ω—ã–µ —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞."));
            return;
        }

        if (sellAmount <= 0 || buyAmount <= 0) {
            player.sendMessage(colorize("&c–°—É–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0!"));
            return;
        }

        if (sellAmount > 1000000000 || buyAmount > 1000000000) {
            player.sendMessage(colorize("&c–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã! –ú–∞–∫—Å–∏–º—É–º: 1,000,000,000"));
            return;
        }

        if (!walletManager.currencyExists(sellCurrency) || !walletManager.currencyExists(buyCurrency)) {
            player.sendMessage(colorize("&c–û–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"));
            return;
        }

        if (sellCurrency.equals(buyCurrency)) {
            String message = Economy.getInstance().getConfig().getString("messages.bourse.same_currency", "&c–ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –Ω–∞ —Å–∞–º—É —Å–µ–±—è!");
            player.sendMessage(colorize(message));
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (walletManager.getPlayerWallet(player.getName()).getSlots().getOrDefault(sellCurrency, 0) < sellAmount) {
            String message = Economy.getInstance().getConfig().getString("messages.bourse.insufficient_funds", "&c–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                    .replace("{currency}", sellCurrency)
                    .replace("{amount}", String.format("%,d", sellAmount));
            player.sendMessage(colorize(message));
            player.sendMessage(colorize("&7–£ –≤–∞—Å: " + String.format("%,d", walletManager.getPlayerWallet(player.getName()).getSlots().getOrDefault(sellCurrency, 0))));
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        Order order = new Order(0, player.getName(), sellCurrency, buyCurrency, sellAmount, buyAmount);
        BourseManager bourseManager = BourseManager.getInstance();

        if (bourseManager.addOrder(order)) {
            // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            int createdOrderId = getLastInsertedOrderId(player.getName());
            setLastCreatedOrderId(createdOrderId);

            double rate = (double) buyAmount / sellAmount;
            String message = Economy.getInstance().getConfig().getString("messages.bourse.order_created", "&a–û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: #{id}")
                    .replace("{id}", String.valueOf(createdOrderId));
            player.sendMessage(colorize(message));
            player.sendMessage(colorize("&7–ü—Ä–æ–¥–∞—é: " + String.format("%,d", sellAmount) + " " + sellCurrency));
            player.sendMessage(colorize("&7–ü–æ–∫—É–ø–∞—é: " + String.format("%,d", buyAmount) + " " + buyCurrency));
            player.sendMessage(colorize("&7–ö—É—Ä—Å: " + String.format("%.6f", rate)));
            player.sendMessage(colorize("&7–û—Ä–¥–µ—Ä–æ–≤: " + (currentOrders + 1) + "/" + (maxOrders == -1 ? "‚àû" : maxOrders)));
            player.sendMessage(colorize("&7–í–∞—à–∏ " + String.format("%,d", sellAmount) + " " + sellCurrency + " –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"));

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            database.logTransaction(player.getName(), null, sellCurrency, sellAmount, "ORDER_CREATE", "Order created on bourse");

        } else {
            player.sendMessage(colorize("&c–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞!"));
        }
    }

    private int getLastInsertedOrderId(String playerName) {
        Database database = Economy.getInstance().getDatabase();
        try (Connection conn = database.getConnection()) {
            String sql = "SELECT id FROM bourse_orders WHERE player_name = ? ORDER BY id DESC LIMIT 1";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, playerName);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt("id");
                    }
                }
            }
        } catch (SQLException e) {
            Economy.getInstance().getLogger().severe("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –æ—Ä–¥–µ—Ä–∞: " + e.getMessage());
        }
        return 0;
    }

    private void handleBuyOrder(Player player, String orderIdStr) {
        try {
            int orderId = Integer.parseInt(orderIdStr);
            BourseManager bourseManager = BourseManager.getInstance();
            Database database = Economy.getInstance().getDatabase();
            WalletManager walletManager = Economy.getInstance().getWalletManager();

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä
            Order order = database.getOrderById(orderId);
            if (order == null) {
                String message = Economy.getInstance().getConfig().getString("messages.bourse.order_not_found", "&c–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                player.sendMessage(colorize(message.replace("{id}", String.valueOf(orderId))));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç —Å–≤–æ–π –æ—Ä–¥–µ—Ä
            if (order.getNickname().equals(player.getName())) {
                String message = Economy.getInstance().getConfig().getString("messages.bourse.cannot_buy_own_order", "&c–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä!");
                player.sendMessage(colorize(message));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            String buyCurrency = order.getBuyCurrency();
            int buyAmount = order.getBuyAmount();

            if (walletManager.getPlayerWallet(player.getName()).getSlots().getOrDefault(buyCurrency, 0) < buyAmount) {
                String message = Economy.getInstance().getConfig().getString("messages.bourse.insufficient_funds", "&c–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                        .replace("{currency}", buyCurrency)
                        .replace("{amount}", String.format("%,d", buyAmount));
                player.sendMessage(colorize(message));
                player.sendMessage(colorize("&7–£ –≤–∞—Å: " + String.format("%,d", walletManager.getPlayerWallet(player.getName()).getSlots().getOrDefault(buyCurrency, 0))));
                return;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
            ExchangeResult result = bourseManager.exchange(orderId, player.getName());

            switch (result) {
                case SUCCESS:
                    String successMessage = Economy.getInstance().getConfig().getString("messages.bourse.order_executed", "&a–û—Ä–¥–µ—Ä #{id} –∏—Å–ø–æ–ª–Ω–µ–Ω!")
                            .replace("{id}", String.valueOf(orderId));
                    player.sendMessage(colorize(successMessage));
                    player.sendMessage(colorize("&7–í—ã –æ—Ç–¥–∞–ª–∏: " + String.format("%,d", buyAmount) + " " + buyCurrency));
                    player.sendMessage(colorize("&7–í—ã –ø–æ–ª—É—á–∏–ª–∏: " + String.format("%,d", order.getSellAmount()) + " " + order.getSellCurrency()));

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                    Player seller = Bukkit.getPlayer(order.getNickname());
                    if (seller != null) {
                        seller.sendMessage(colorize(successMessage));
                        seller.sendMessage(colorize("&7–í—ã –ø–æ–ª—É—á–∏–ª–∏: " + String.format("%,d", buyAmount) + " " + buyCurrency));
                        seller.sendMessage(colorize("&7–û—Ç –∏–≥—Ä–æ–∫–∞: " + player.getName()));
                    }

                    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–º–µ–Ω
                    database.logTransaction(player.getName(), order.getNickname(), buyCurrency, buyAmount, "ORDER_EXCHANGE", "Order #" + orderId + " exchanged");
                    database.logTransaction(order.getNickname(), player.getName(), order.getSellCurrency(), order.getSellAmount(), "ORDER_EXCHANGE", "Order #" + orderId + " exchanged");

                    break;

                case ORDER_NOT_FOUND:
                    String notFoundMessage = Economy.getInstance().getConfig().getString("messages.bourse.order_not_found", "&c–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                    player.sendMessage(colorize(notFoundMessage));
                    break;

                case FAILED:
                    player.sendMessage(colorize("&c–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞!"));
                    break;

                default:
                    player.sendMessage(colorize("&c–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: " + result.name()));
                    break;
            }

        } catch (NumberFormatException e) {
            String message = Economy.getInstance().getConfig().getString("messages.bourse.invalid_order_id", "&c–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞!");
            player.sendMessage(colorize(message));
        }
    }

    private void handleCancelOrder(Player player, String orderIdStr) {
        try {
            int orderId = Integer.parseInt(orderIdStr);
            Database database = Economy.getInstance().getDatabase();

            Order order = database.getPlayerOrder(orderId, player.getName());
            if (order == null) {
                String message = Economy.getInstance().getConfig().getString("messages.bourse.order_not_found", "&c–û—Ä–¥–µ—Ä #{id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!")
                        .replace("{id}", String.valueOf(orderId));
                player.sendMessage(colorize(message));
                return;
            }

            cancelOrder(player, order);

        } catch (NumberFormatException e) {
            String message = Economy.getInstance().getConfig().getString("messages.bourse.invalid_order_id", "&c–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞!");
            player.sendMessage(colorize(message));
        }
    }

    private void cancelOrder(Player player, Order order) {
        Database database = Economy.getInstance().getDatabase();
        WalletManager walletManager = Economy.getInstance().getWalletManager();

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª—é—Ç—É –∏–≥—Ä–æ–∫—É
        walletManager.putMoney(player.getName(), order.getSellCurrency(), order.getSellAmount());

        // –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä
        if (database.cancelPlayerOrder(order.getId(), player.getName())) {
            String message = Economy.getInstance().getConfig().getString("messages.bourse.order_cancelled", "&a–û—Ä–¥–µ—Ä #{id} –æ—Ç–º–µ–Ω–µ–Ω!")
                    .replace("{id}", String.valueOf(order.getId()));
            player.sendMessage(colorize(message));
            player.sendMessage(colorize("&7–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: " + String.format("%,d", order.getSellAmount()) + " " + order.getSellCurrency()));

            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
            database.logTransaction(player.getName(), null, order.getSellCurrency(), order.getSellAmount(),
                    "ORDER_CANCEL", "Order #" + order.getId() + " cancelled by player");

        } else {
            player.sendMessage(colorize("&c–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞!"));
        }
    }

    private void cancelAllOrders(Player player) {
        Database database = Economy.getInstance().getDatabase();
        WalletManager walletManager = Economy.getInstance().getWalletManager();
        List<Order> playerOrders = database.getPlayerOrders(player.getName());

        if (playerOrders.isEmpty()) {
            player.sendMessage(colorize("&7–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã"));
            return;
        }

        int cancelledCount = 0;

        for (Order order : playerOrders) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª—é—Ç—É
            walletManager.putMoney(player.getName(), order.getSellCurrency(), order.getSellAmount());

            // –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
            if (database.cancelPlayerOrder(order.getId(), player.getName())) {
                cancelledCount++;

                // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
                database.logTransaction(player.getName(), null, order.getSellCurrency(), order.getSellAmount(),
                        "ORDER_CANCEL_ALL", "Order #" + order.getId() + " cancelled (cancel all)");
            }
        }

        player.sendMessage(colorize("&a–û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: " + cancelledCount));
        if (cancelledCount > 0) {
            player.sendMessage(colorize("&7–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤–∞–ª—é—Ç –≤ –∫–æ—à–µ–ª–µ–∫"));
        }
    }

    private void showOrderDetails(Player player, Order order) {
        double rate = (double) order.getBuyAmount() / order.getSellAmount();
        player.sendMessage(colorize("&6=== –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ #" + order.getId() + " ==="));
        if (order.getNickname().equals(player.getName())) {
            player.sendMessage(colorize("&7–í–∞—à –æ—Ä–¥–µ—Ä"));
        } else {
            player.sendMessage(colorize("&7–ü—Ä–æ–¥–∞–≤–µ—Ü: &f" + order.getNickname()));
        }
        player.sendMessage(colorize("&7–ü—Ä–æ–¥–∞–µ—Ç: &e" + String.format("%,d", order.getSellAmount()) + " " + order.getSellCurrency()));
        player.sendMessage(colorize("&7–ü–æ–∫—É–ø–∞–µ—Ç: &e" + String.format("%,d", order.getBuyAmount()) + " " + order.getBuyCurrency()));
        player.sendMessage(colorize("&7–ö—É—Ä—Å: &f" + String.format("%.6f", rate)));
        player.sendMessage(colorize("&7–ó–∞ 1 " + order.getSellCurrency() + " –ø–æ–ª—É—á–∏—Ç–µ " + String.format("%.6f", rate) + " " + order.getBuyCurrency()));

        if (order.getNickname().equals(player.getName())) {
            player.sendMessage(colorize("&7–î–ª—è –æ—Ç–º–µ–Ω—ã: &c/bourse cancel " + order.getId()));
        } else {
            player.sendMessage(colorize("&7–î–ª—è –ø–æ–∫—É–ø–∫–∏: &a/bourse buy " + order.getId()));
        }
    }

    private void showHelp(Player player) {
        player.sendMessage(colorize("&6=== –ë–∏—Ä–∂–∞ –≤–∞–ª—é—Ç ==="));
        player.sendMessage(colorize("&7/bourse &f- –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –±–∏—Ä–∂–∏"));
        player.sendMessage(colorize("&7/bourse add <–ø—Ä–æ–¥–∞—é_–≤–∞–ª—é—Ç–∞> <–∫–æ–ª-–≤–æ> <–ø–æ–∫—É–ø–∞—é_–≤–∞–ª—é—Ç–∞> <–∫–æ–ª-–≤–æ> &f- —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä"));
        player.sendMessage(colorize("&7/bourse buy <id> &f- –∫—É–ø–∏—Ç—å –ø–æ –æ—Ä–¥–µ—Ä—É"));
        player.sendMessage(colorize("&7/bourse cancel <id> &f- –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ä–¥–µ—Ä"));
        player.sendMessage(colorize("&7/bourse my &f- –º–æ–∏ –æ—Ä–¥–µ—Ä–∞"));
        player.sendMessage(colorize("&7/bourse pair <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2> &f- –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"));
        player.sendMessage(colorize("&e"));
        player.sendMessage(colorize("&7–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:"));
        player.sendMessage(colorize("&f/bourse add VIL 100 USD 50"));
        player.sendMessage(colorize("&7(–ø—Ä–æ–¥–∞—é 100 VIL, –ø–æ–∫—É–ø–∞—é 50 USD)"));
        player.sendMessage(colorize("&e"));
        player.sendMessage(colorize("&7–õ–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤: " + (getMaxOrders(player) == -1 ? "‚àû" : getMaxOrders(player))));
        player.sendMessage(colorize("&e"));
        player.sendMessage(colorize("&7–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:"));
        player.sendMessage(colorize("&fVIL, USD, EUR, RUB, GBP &7–∏ –¥—Ä—É–≥–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã"));
    }

    private String colorize(String text) {
        return text.replace("&", "¬ß");
    }

    private void openCreateOrderGUI(Player player, String sellCurrency, String buyCurrency) {
        Inventory gui = Bukkit.createInventory(null, 27, colorize("&6–°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä: " + sellCurrency + " ‚Üí " + buyCurrency));

        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        ItemStack instruction = new ItemStack(Material.BOOK);
        ItemMeta instructionMeta = instruction.getItemMeta();
        instructionMeta.setDisplayName(colorize("&e&l–ò–ù–°–¢–†–£–ö–¶–ò–Ø"));
        instructionMeta.setLore(Arrays.asList(
                colorize("&7–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:"),
                colorize("&f/bourse add " + sellCurrency + " <–∫–æ–ª-–≤–æ> " + buyCurrency + " <–∫–æ–ª-–≤–æ>"),
                colorize("&7"),
                colorize("&7–ü—Ä–∏–º–µ—Ä:"),
                colorize("&f/bourse add " + sellCurrency + " 100 " + buyCurrency + " 50")
        ));
        instruction.setItemMeta(instructionMeta);
        gui.setItem(13, instruction);

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        ItemStack backButton = new ItemStack(Material.ARROW);
        ItemMeta backMeta = backButton.getItemMeta();
        backMeta.setDisplayName(colorize("&c–ù–∞–∑–∞–¥"));
        backButton.setItemMeta(backMeta);
        gui.setItem(18, backButton);

        player.openInventory(gui);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ
        player.sendMessage(colorize("&7–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø–∞—Ä—ã " + sellCurrency + "/" + buyCurrency + ":"));
        player.sendMessage(colorize("&f/bourse add " + sellCurrency + " <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> " + buyCurrency + " <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>"));
    }
}